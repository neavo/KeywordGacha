import re

class FakeNameHelper():

    # 伪名列表
    DEFAULT: list[str] = [
        "蓝霁云",               # 雨后初晴的意象
        "檀秋萦",               # 檀香与秋思萦绕
        "墨临川",               # 文墨与临水意境
        "泠鸢晚",               # 清越之声与黄昏纸鸢
        "云螭遥",               # 云雾中的龙形
        "邝溟幽",               # 深邃幽暗的海域
        "颛鹤唳",               # 鹤鸣九皋的悠远
        "玄璆夜",               # 黑玉般的夜色
        "砚秋辞",               # 文房与秋意的结合
        "聆音澈",               # 聆听清澈之音
        "雪渟寒",               # 积雪静潭的寒意
        "萤照晚",               # 萤火照亮黄昏
        "青霭浮",               # 青色云雾漂浮
        "绛霄临",               # 红色天空降临
        "墨漪澜",               # 墨色水波荡漾
        "霜序遥",               # 霜降时节的遥远
        "霁川流",               # 雨后天晴的河流
        "檀烟渺",               # 檀香烟雾渺茫
        "玄螭隐",               # 黑龙隐匿
        "青冥远",               # 青色天空的遥远
        "墨笙寒",               # 墨色笙箫的寒意
        "霜序晚",               # 霜降时节的黄昏
        "霁云舒",               # 雨后天晴的云舒展
        "檀香凝",               # 檀香凝结
        "玄夜阑",               # 深夜将尽
        "紫陌迁",               # 紫色田陌，有迁移之感
        "容止安",               # 容貌举止安详
        "蔚迟暮",               # 蔚蓝与迟暮之年
        "靖远尘",               # 安靖远离尘世
        "聆夜笙",               # 聆听夜晚笙歌
        "绯辞镜",               # 绯红辞别镜子
        "予怀瑾",               # 给予怀抱美玉
        "疏星朗",               # 稀疏星星明朗
        "霁无瑕",               # 雨后晴朗无瑕疵
        "素问筠",               # 素雅询问竹筠
        "景行瞻",               # 高尚品行值得瞻仰
        "聆风吟",               # 聆听风的吟唱
        "怀霜澈",               # 怀抱冰霜般清澈
        "静姝窈",               # 静美女子窈窕
        "思覃远",               # 思绪深远
        "语凝烟",               # 话语凝结如烟
        "霁月朗",               # 雨后明月清朗
        "星河澹",               # 星河景象恬淡
        "清芷蘅",               # 清雅芬芳的白芷和杜蘅
        "韶华倾",               # 美好年华倾注
        "霁雪霏",               # 雨后雪花纷飞
        "云舒卷",               # 云朵舒卷自如
        "風祭宵",               # 风祭祀的夜晚
        "月代雫",               # 月亮替代的滴落
        "雨宮静",               # 雨宫的宁静
        "星影律",               # 星星影子的规律
        "霧島朔",               # 雾岛的朔日
        "時雨遥",               # 时雨的遥远
        "雪村茜",               # 雪村的茜草色
        "花垣葵",               # 花园墙壁边的葵
        "水瀬碧",               # 水流湍急处的碧蓝
        "空木凪",               # 空心树的平静
        "音羽奏",               # 音羽的演奏
        "琴引紬",               # 琴弦牵引的丝绸
        "篝火茜",               # 篝火的茜草色
        "砂川凪",               # 砂石河流的平静
        "藤咲雫",               # 藤花盛开时滴落
        "柚木碧",               # 柚子树的碧蓝
        "柊木律",               # 冬青树的规律
        "楓原宵",               # 枫树原野的夜晚
        "霞見遥",               # 从霞雾中眺望远方
        "篝屋静",               # 篝火屋的宁静
        "草薙朔",               # 草薙的朔日
        "月詠茜",               # 咏唱月亮的茜草色
        "風早奏",               # 风快速的演奏
        "雪代紬",               # 雪替代的丝绸
        "花散里",               # 花朵散落的村庄
        "鸦羽透",               # 乌鸦羽毛意象的透明感
        "星屑海",               # 天文与海洋的浪漫结合
        "铁仙斎",               # 金属质感的三字姓氏
        "龙胆朔",               # 植物名与朔日的组合
        "冬月葵",               # 冬季月色与葵花的结合
        "胧月夜",               # 朦胧月色的夜晚
        "霞草雫",               # 霞光与草间露珠的意象
        "薄墨葵",               # 淡墨色与葵花的结合
        "绯桜咲",               # 绯色樱花盛开的意象
        "苍海凪",               # 苍茫大海与风平浪静的组合
        "翠岚悠",               # 翠绿山岚与悠远意境的结合
        "琥珀川",               # 宝石与河流的意象组合
        "霁辰砂",               # 雨后晴朗，辰砂般红艳
        "暮云合",               # 傍晚云彩汇合
        "清漪岚",               # 清澈水波，山岚缥缈
        "素影瞳",               # 素净身影，清澈眼眸
        "怀瑾瑜",               # 怀抱美玉瑾瑜
        "朗夜汐",               # 明朗夜晚，潮汐涨落
        "轻尘陌",               # 轻微尘埃，田间小路
        "雪霁空",               # 雪后晴朗天空
        "泠然止",               # 清冷的样子，停止
        "澹台清",               # 复姓澹台，清澈之意
        "汐見凪",               # 眺望海潮的平静
        "氷川朔",               # 冰川的朔日
        "月白静",               # 月亮白色般的宁静
        "風音律",               # 风的声音的规律
        "雪華遥",               # 雪花的遥远
        "雨夜雫",               # 雨夜的滴落
    ]

    # 伪名映射表
    FAKE_NAME: list[str] = {}
    FAKE_NAME_MAPPING: dict[str, str] = {}

    @classmethod
    def reset(cls) -> None:
        cls.FAKE_NAME = cls.DEFAULT.copy()
        cls.FAKE_NAME_MAPPING.clear()

    @classmethod
    def inject(cls, src: str) -> str:

        def repl(match: re.Match) -> str:
            code: str = match.group(0)
            if code in cls.FAKE_NAME_MAPPING:
                return cls.FAKE_NAME_MAPPING[code]
            elif len(cls.FAKE_NAME) > 0:
                cls.FAKE_NAME_MAPPING[code] = cls.FAKE_NAME.pop(0)
                return cls.FAKE_NAME_MAPPING[code]
            else:
                return code

        # 将代码转换为伪名
        src = re.sub(r"\\n{1,2}\[\d+\]", lambda match: repl(match), src, flags = re.IGNORECASE)

        return src

    @classmethod
    def restore(self, src: str) -> tuple[str, bool]:
        original: str = src

        for code, name in self.FAKE_NAME_MAPPING.items():
            src = src.replace(name, code)

        return src, original != src